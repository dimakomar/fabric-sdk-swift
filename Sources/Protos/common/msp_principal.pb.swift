/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: common/msp_principal.proto
 *
 */

// 
// Copyright IBM Corp. 2016 All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

//  msp_principal.proto contains proto messages defining the generalized
//  MSP notion of identity called an MSPPrincipal.  It is used as part of
//  the chain configuration, in particular as the identity parameters to
//  the configuration.proto file.  This does not represent the MSP
//  configuration for a chain, but is understood by MSPs

///   MSPPrincipal aims to represent an MSP-centric set of identities.
///   In particular, this structure allows for definition of
///    - a group of identities that are member of the same MSP
///    - a group of identities that are member of the same organization unit
///      in the same MSP
///    - a group of identities that are administering a specific MSP
///    - a specific identity
///   Expressing these groups is done given two fields of the fields below
///    - Classification, that defines the type of classification of identities
///      in an MSP this principal would be defined on; Classification can take
///      three values:
///       (i)  ByMSPRole: that represents a classification of identities within
///            MSP based on one of the two pre-defined MSP rules, "member" and "admin"
///       (ii) ByOrganizationUnit: that represents a classification of identities
///            within MSP based on the organization unit an identity belongs to
///       (iii)ByIdentity that denotes that MSPPrincipal is mapped to a single
///            identity/certificate; this would mean that the Principal bytes
///            message
struct Common_MSPPrincipal: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MSPPrincipal"
  static let protoPackageName: String = "common"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "principal_classification", json: "principalClassification"),
    2: .same(proto: "principal"),
  ]

  ///   Classification describes the way that one should process
  ///   Principal. An Classification value of "ByOrganizationUnit" reflects
  ///   that "Principal" contains the name of an organization this MSP
  ///   handles. A Classification value "ByIdentity" means that
  ///   "Principal" contains a specific identity. Default value
  ///   denotes that Principal contains one of the groups by
  ///   default supported by all MSPs ("admin" or "member").
  var principalClassification: Common_MSPPrincipal.Classification = Common_MSPPrincipal.Classification.role

  ///   Principal completes the policy principal definition. For the default
  ///   principal types, Principal can be either "Admin" or "Member".
  ///   For the ByOrganizationUnit/ByIdentity values of Classification,
  ///   PolicyPrincipal acquires its value from an organization unit or
  ///   identity, respectively.
  var principal: Data = Data()

  enum Classification: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    typealias RawValue = Int

    ///   Represents the one of the dedicated MSP roles, the
    case role // = 0

    ///   one of a member of MSP network, and the one of an
    ///   administrator of an MSP network
    case organizationUnit // = 1

    ///   groupping of entities, per MSP affiliation
    ///   E.g., this can well be represented by an MSP's
    ///   Organization unit
    case identity // = 2
    case UNRECOGNIZED(Int)

    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "ROLE"),
      1: .same(proto: "ORGANIZATION_UNIT"),
      2: .same(proto: "IDENTITY"),
    ]

    init() {
      self = .role
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .role
      case 1: self = .organizationUnit
      case 2: self = .identity
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .role: return 0
      case .organizationUnit: return 1
      case .identity: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularEnumField(value: &principalClassification)
    case 2: try decoder.decodeSingularBytesField(value: &principal)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if principalClassification != Common_MSPPrincipal.Classification.role {
      try visitor.visitSingularEnumField(value: principalClassification, fieldNumber: 1)
    }
    if !principal.isEmpty {
      try visitor.visitSingularBytesField(value: principal, fieldNumber: 2)
    }
  }

  func _protobuf_generated_isEqualTo(other: Common_MSPPrincipal) -> Bool {
    if principalClassification != other.principalClassification {return false}
    if principal != other.principal {return false}
    return true
  }
}

///   OrganizationUnit governs the organization of the Principal
///   field of a policy principal when a specific organization unity members
///   are to be defined within a policy principal.
struct Common_OrganizationUnit: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "OrganizationUnit"
  static let protoPackageName: String = "common"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "msp_identifier", json: "mspIdentifier"),
    2: .unique(proto: "organizational_unit_identifier", json: "organizationalUnitIdentifier"),
    3: .unique(proto: "certifiers_identifier", json: "certifiersIdentifier"),
  ]

  ///   MSPIdentifier represents the identifier of the MSP this organization unit
  ///   refers to
  var mspIdentifier: String = ""

  ///   OrganizationUnitIdentifier defines the organizational unit under the
  ///   MSP identified with MSPIdentifier
  var organizationalUnitIdentifier: String = ""

  ///   CertifiersIdentifier is the hash of certificates chain of trust
  ///   related to this organizational unit
  var certifiersIdentifier: Data = Data()

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularStringField(value: &mspIdentifier)
    case 2: try decoder.decodeSingularStringField(value: &organizationalUnitIdentifier)
    case 3: try decoder.decodeSingularBytesField(value: &certifiersIdentifier)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !mspIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: mspIdentifier, fieldNumber: 1)
    }
    if !organizationalUnitIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: organizationalUnitIdentifier, fieldNumber: 2)
    }
    if !certifiersIdentifier.isEmpty {
      try visitor.visitSingularBytesField(value: certifiersIdentifier, fieldNumber: 3)
    }
  }

  func _protobuf_generated_isEqualTo(other: Common_OrganizationUnit) -> Bool {
    if mspIdentifier != other.mspIdentifier {return false}
    if organizationalUnitIdentifier != other.organizationalUnitIdentifier {return false}
    if certifiersIdentifier != other.certifiersIdentifier {return false}
    return true
  }
}

///   MSPRole governs the organization of the Principal
///   field of an MSPPrincipal when it aims to define one of the
///   two dedicated roles within an MSP: Admin and Members.
struct Common_MSPRole: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MSPRole"
  static let protoPackageName: String = "common"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "msp_identifier", json: "mspIdentifier"),
    2: .same(proto: "Role"),
  ]

  ///   MSPIdentifier represents the identifier of the MSP this principal
  ///   refers to
  var mspIdentifier: String = ""

  ///   MSPRoleType defines which of the available, pre-defined MSP-roles
  ///   an identiy should posess inside the MSP with identifier MSPidentifier
  var role: Common_MSPRole.MSPRoleType = Common_MSPRole.MSPRoleType.member

  enum MSPRoleType: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    typealias RawValue = Int

    ///   Represents an MSP Member
    case member // = 0

    ///   Represents an MSP Admin
    case admin // = 1
    case UNRECOGNIZED(Int)

    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "MEMBER"),
      1: .same(proto: "ADMIN"),
    ]

    init() {
      self = .member
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .member
      case 1: self = .admin
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .member: return 0
      case .admin: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularStringField(value: &mspIdentifier)
    case 2: try decoder.decodeSingularEnumField(value: &role)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !mspIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: mspIdentifier, fieldNumber: 1)
    }
    if role != Common_MSPRole.MSPRoleType.member {
      try visitor.visitSingularEnumField(value: role, fieldNumber: 2)
    }
  }

  func _protobuf_generated_isEqualTo(other: Common_MSPRole) -> Bool {
    if mspIdentifier != other.mspIdentifier {return false}
    if role != other.role {return false}
    return true
  }
}
