/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: common/msp_principal.proto
 *
 */

// 
// Copyright IBM Corp. 2016 All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf


//  msp_principal.proto contains proto messages defining the generalized
//  MSP notion of identity called an MSPPrincipal.  It is used as part of
//  the chain configuration, in particular as the identity parameters to
//  the configuration.proto file.  This does not represent the MSP
//  configuration for a chain, but is understood by MSPs

///   MSPPrincipal aims to represent an MSP-centric set of identities.
///   In particular, this structure allows for definition of
///    - a group of identities that are member of the same MSP
///    - a group of identities that are member of the same organization unit
///      in the same MSP
///    - a group of identities that are administering a specific MSP
///    - a specific identity
///   Expressing these groups is done given two fields of the fields below
///    - Classification, that defines the type of classification of identities
///      in an MSP this principal would be defined on; Classification can take
///      three values:
///       (i)  ByMSPRole: that represents a classification of identities within
///            MSP based on one of the two pre-defined MSP rules, "member" and "admin"
///       (ii) ByOrganizationUnit: that represents a classification of identities
///            within MSP based on the organization unit an identity belongs to
///       (iii)ByIdentity that denotes that MSPPrincipal is mapped to a single
///            identity/certificate; this would mean that the Principal bytes
///            message
struct Common_MSPPrincipal: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Common_MSPPrincipal"}
  public var protoMessageName: String {return "MSPPrincipal"}
  public var protoPackageName: String {return "common"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "principal_classification", json: "principalClassification", swift: "principalClassification"),
    2: .same(proto: "principal", swift: "principal"),
  ]


  enum Classification: SwiftProtobuf.Enum {
    typealias RawValue = Int

    ///   Represents the one of the dedicated MSP roles, the
    case role // = 0

    ///   one of a member of MSP network, and the one of an
    ///   administrator of an MSP network
    case organizationUnit // = 1

    ///   groupping of entities, per MSP affiliation
    ///   E.g., this can well be represented by an MSP's
    ///   Organization unit
    case identity // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .role
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .role
      case 1: self = .organizationUnit
      case 2: self = .identity
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    init?(name: String) {
      switch name {
      case "role": self = .role
      case "organizationUnit": self = .organizationUnit
      case "identity": self = .identity
      default: return nil
      }
    }

    init?(jsonName: String) {
      switch jsonName {
      case "ROLE": self = .role
      case "ORGANIZATION_UNIT": self = .organizationUnit
      case "IDENTITY": self = .identity
      default: return nil
      }
    }

    init?(protoName: String) {
      switch protoName {
      case "ROLE": self = .role
      case "ORGANIZATION_UNIT": self = .organizationUnit
      case "IDENTITY": self = .identity
      default: return nil
      }
    }

    var rawValue: Int {
      get {
        switch self {
        case .role: return 0
        case .organizationUnit: return 1
        case .identity: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    var json: String {
      get {
        switch self {
        case .role: return "\"ROLE\""
        case .organizationUnit: return "\"ORGANIZATION_UNIT\""
        case .identity: return "\"IDENTITY\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    var hashValue: Int { return rawValue }

    var debugDescription: String {
      get {
        switch self {
        case .role: return ".role"
        case .organizationUnit: return ".organizationUnit"
        case .identity: return ".identity"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  ///   Classification describes the way that one should process
  ///   Principal. An Classification value of "ByOrganizationUnit" reflects
  ///   that "Principal" contains the name of an organization this MSP
  ///   handles. A Classification value "ByIdentity" means that
  ///   "Principal" contains a specific identity. Default value
  ///   denotes that Principal contains one of the groups by
  ///   default supported by all MSPs ("admin" or "member").
  var principalClassification: Common_MSPPrincipal.Classification = Common_MSPPrincipal.Classification.role

  ///   Principal completes the policy principal definition. For the default
  ///   principal types, Principal can be either "Admin" or "Member".
  ///   For the ByOrganizationUnit/ByIdentity values of Classification,
  ///   PolicyPrincipal acquires its value from an organization unit or
  ///   identity, respectively.
  var principal: Data = Data()

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: Common_MSPPrincipal.Classification.self, value: &principalClassification)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &principal)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if principalClassification != Common_MSPPrincipal.Classification.role {
      try visitor.visitSingularField(fieldType: Common_MSPPrincipal.Classification.self, value: principalClassification, fieldNumber: 1)
    }
    if principal != Data() {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: principal, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Common_MSPPrincipal) -> Bool {
    if principalClassification != other.principalClassification {return false}
    if principal != other.principal {return false}
    return true
  }
}

///   OrganizationUnit governs the organization of the Principal
///   field of a policy principal when a specific organization unity members
///   are to be defined within a policy principal.
struct Common_OrganizationUnit: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Common_OrganizationUnit"}
  public var protoMessageName: String {return "OrganizationUnit"}
  public var protoPackageName: String {return "common"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "msp_identifier", json: "mspIdentifier", swift: "mspIdentifier"),
    2: .unique(proto: "organizational_unit_identifier", json: "organizationalUnitIdentifier", swift: "organizationalUnitIdentifier"),
  ]


  ///   MSPIdentifier represents the identifier of the MSP this organization unit
  ///   refers to
  var mspIdentifier: String = ""

  ///   OrganizationUnitIdentifier defines the organization unit under the
  ///   MSP identified with MSPIdentifier
  var organizationalUnitIdentifier: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &mspIdentifier)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &organizationalUnitIdentifier)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if mspIdentifier != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: mspIdentifier, fieldNumber: 1)
    }
    if organizationalUnitIdentifier != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: organizationalUnitIdentifier, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Common_OrganizationUnit) -> Bool {
    if mspIdentifier != other.mspIdentifier {return false}
    if organizationalUnitIdentifier != other.organizationalUnitIdentifier {return false}
    return true
  }
}

///   MSPRole governs the organization of the Principal
///   field of an MSPPrincipal when it aims to define one of the
///   two dedicated roles within an MSP: Admin and Members.
struct Common_MSPRole: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Common_MSPRole"}
  public var protoMessageName: String {return "MSPRole"}
  public var protoPackageName: String {return "common"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "msp_identifier", json: "mspIdentifier", swift: "mspIdentifier"),
    2: .same(proto: "Role", swift: "role"),
  ]


  enum MSPRoleType: SwiftProtobuf.Enum {
    typealias RawValue = Int

    ///   Represents an MSP Member
    case member // = 0

    ///   Represents an MSP Admin
    case admin // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .member
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .member
      case 1: self = .admin
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    init?(name: String) {
      switch name {
      case "member": self = .member
      case "admin": self = .admin
      default: return nil
      }
    }

    init?(jsonName: String) {
      switch jsonName {
      case "MEMBER": self = .member
      case "ADMIN": self = .admin
      default: return nil
      }
    }

    init?(protoName: String) {
      switch protoName {
      case "MEMBER": self = .member
      case "ADMIN": self = .admin
      default: return nil
      }
    }

    var rawValue: Int {
      get {
        switch self {
        case .member: return 0
        case .admin: return 1
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    var json: String {
      get {
        switch self {
        case .member: return "\"MEMBER\""
        case .admin: return "\"ADMIN\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    var hashValue: Int { return rawValue }

    var debugDescription: String {
      get {
        switch self {
        case .member: return ".member"
        case .admin: return ".admin"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  ///   MSPIdentifier represents the identifier of the MSP this principal
  ///   refers to
  var mspIdentifier: String = ""

  ///   MSPRoleType defines which of the available, pre-defined MSP-roles
  ///   an identiy should posess inside the MSP with identifier MSPidentifier
  var role: Common_MSPRole.MSPRoleType = Common_MSPRole.MSPRoleType.member

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &mspIdentifier)
    case 2: try setter.decodeSingularField(fieldType: Common_MSPRole.MSPRoleType.self, value: &role)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if mspIdentifier != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: mspIdentifier, fieldNumber: 1)
    }
    if role != Common_MSPRole.MSPRoleType.member {
      try visitor.visitSingularField(fieldType: Common_MSPRole.MSPRoleType.self, value: role, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Common_MSPRole) -> Bool {
    if mspIdentifier != other.mspIdentifier {return false}
    if role != other.role {return false}
    return true
  }
}
