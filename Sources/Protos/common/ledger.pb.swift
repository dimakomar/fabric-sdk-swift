/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: common/ledger.proto
 *
 */

///  
///  Copyright IBM Corp. 2016 All Rights Reserved.
///  
///  Licensed under the Apache License, Version 2.0 (the "License");
///  you may not use this file except in compliance with the License.
///  You may obtain a copy of the License at
///  
///  http://www.apache.org/licenses/LICENSE-2.0
///  
///  Unless required by applicable law or agreed to in writing, software
///  distributed under the License is distributed on an "AS IS" BASIS,
///  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
///  See the License for the specific language governing permissions and
///  limitations under the License.

import Foundation
import SwiftProtobuf


///   Contains information about the blockchain ledger such as height, current
///   block hash, and previous block hash.
struct Common_BlockchainInfo: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Common_BlockchainInfo"}
  public var protoMessageName: String {return "BlockchainInfo"}
  public var protoPackageName: String {return "common"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "height", swift: "height"),
    2: .same(proto: "currentBlockHash", swift: "currentBlockHash"),
    3: .same(proto: "previousBlockHash", swift: "previousBlockHash"),
  ]


  var height: UInt64 = 0

  var currentBlockHash: Data = Data()

  var previousBlockHash: Data = Data()

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: &height)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &currentBlockHash)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &previousBlockHash)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if height != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: height, fieldNumber: 1)
    }
    if currentBlockHash != Data() {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: currentBlockHash, fieldNumber: 2)
    }
    if previousBlockHash != Data() {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: previousBlockHash, fieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: Common_BlockchainInfo) -> Bool {
    if height != other.height {return false}
    if currentBlockHash != other.currentBlockHash {return false}
    if previousBlockHash != other.previousBlockHash {return false}
    return true
  }
}
