/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: common/ledger.proto
 *
 */

///  
///  Copyright IBM Corp. 2016 All Rights Reserved.
///  
///  Licensed under the Apache License, Version 2.0 (the "License");
///  you may not use this file except in compliance with the License.
///  You may obtain a copy of the License at
///  
///  http://www.apache.org/licenses/LICENSE-2.0
///  
///  Unless required by applicable law or agreed to in writing, software
///  distributed under the License is distributed on an "AS IS" BASIS,
///  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
///  See the License for the specific language governing permissions and
///  limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

///   Contains information about the blockchain ledger such as height, current
///   block hash, and previous block hash.
struct Common_BlockchainInfo: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "BlockchainInfo"
  static let protoPackageName: String = "common"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "height"),
    2: .same(proto: "currentBlockHash"),
    3: .same(proto: "previousBlockHash"),
  ]

  var height: UInt64 = 0

  var currentBlockHash: Data = Data()

  var previousBlockHash: Data = Data()

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularUInt64Field(value: &height)
    case 2: try decoder.decodeSingularBytesField(value: &currentBlockHash)
    case 3: try decoder.decodeSingularBytesField(value: &previousBlockHash)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if height != 0 {
      try visitor.visitSingularUInt64Field(value: height, fieldNumber: 1)
    }
    if !currentBlockHash.isEmpty {
      try visitor.visitSingularBytesField(value: currentBlockHash, fieldNumber: 2)
    }
    if !previousBlockHash.isEmpty {
      try visitor.visitSingularBytesField(value: previousBlockHash, fieldNumber: 3)
    }
  }

  func _protobuf_generated_isEqualTo(other: Common_BlockchainInfo) -> Bool {
    if height != other.height {return false}
    if currentBlockHash != other.currentBlockHash {return false}
    if previousBlockHash != other.previousBlockHash {return false}
    return true
  }
}
