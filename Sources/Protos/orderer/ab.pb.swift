/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: orderer/ab.proto
 *
 */

// 
// Copyright IBM Corp. 2016 All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

struct Orderer_BroadcastResponse: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "BroadcastResponse"
  static let protoPackageName: String = "orderer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  var status: Common_Status = Common_Status.unknown

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularEnumField(value: &status)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if status != Common_Status.unknown {
      try visitor.visitSingularEnumField(value: status, fieldNumber: 1)
    }
  }

  func _protobuf_generated_isEqualTo(other: Orderer_BroadcastResponse) -> Bool {
    if status != other.status {return false}
    return true
  }
}

struct Orderer_SeekNewest: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SeekNewest"
  static let protoPackageName: String = "orderer"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
  }

  func _protobuf_generated_isEqualTo(other: Orderer_SeekNewest) -> Bool {
    return true
  }
}

struct Orderer_SeekOldest: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SeekOldest"
  static let protoPackageName: String = "orderer"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
  }

  func _protobuf_generated_isEqualTo(other: Orderer_SeekOldest) -> Bool {
    return true
  }
}

struct Orderer_SeekSpecified: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SeekSpecified"
  static let protoPackageName: String = "orderer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "number"),
  ]

  var number: UInt64 = 0

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularUInt64Field(value: &number)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if number != 0 {
      try visitor.visitSingularUInt64Field(value: number, fieldNumber: 1)
    }
  }

  func _protobuf_generated_isEqualTo(other: Orderer_SeekSpecified) -> Bool {
    if number != other.number {return false}
    return true
  }
}

struct Orderer_SeekPosition: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SeekPosition"
  static let protoPackageName: String = "orderer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "newest"),
    2: .same(proto: "oldest"),
    3: .same(proto: "specified"),
  ]

  private class _StorageClass {
    var _type: Orderer_SeekPosition.OneOf_Type?

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._type = _type
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  var newest: Orderer_SeekNewest {
    get {
      if case .newest(let v)? = _storage._type {
        return v
      }
      return Orderer_SeekNewest()
    }
    set {
      _uniqueStorage()._type = .newest(newValue)
    }
  }

  var oldest: Orderer_SeekOldest {
    get {
      if case .oldest(let v)? = _storage._type {
        return v
      }
      return Orderer_SeekOldest()
    }
    set {
      _uniqueStorage()._type = .oldest(newValue)
    }
  }

  var specified: Orderer_SeekSpecified {
    get {
      if case .specified(let v)? = _storage._type {
        return v
      }
      return Orderer_SeekSpecified()
    }
    set {
      _uniqueStorage()._type = .specified(newValue)
    }
  }

  var type: OneOf_Type? {
    get {return _storage._type}
    set {
      _uniqueStorage()._type = newValue
    }
  }

  enum OneOf_Type: Equatable {
    case newest(Orderer_SeekNewest)
    case oldest(Orderer_SeekOldest)
    case specified(Orderer_SeekSpecified)

    static func ==(lhs: Orderer_SeekPosition.OneOf_Type, rhs: Orderer_SeekPosition.OneOf_Type) -> Bool {
      switch (lhs, rhs) {
      case (.newest(let l), .newest(let r)): return l == r
      case (.oldest(let l), .oldest(let r)): return l == r
      case (.specified(let l), .specified(let r)): return l == r
      default: return false
      }
    }

    fileprivate init?<T: SwiftProtobuf.Decoder>(byDecodingFrom decoder: inout T, fieldNumber: Int) throws {
      switch fieldNumber {
      case 1:
        var value: Orderer_SeekNewest?
        try decoder.decodeSingularMessageField(value: &value)
        if let value = value {
          self = .newest(value)
          return
        }
      case 2:
        var value: Orderer_SeekOldest?
        try decoder.decodeSingularMessageField(value: &value)
        if let value = value {
          self = .oldest(value)
          return
        }
      case 3:
        var value: Orderer_SeekSpecified?
        try decoder.decodeSingularMessageField(value: &value)
        if let value = value {
          self = .specified(value)
          return
        }
      default:
        break
      }
      return nil
    }

    fileprivate func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V, start: Int, end: Int) throws {
      switch self {
      case .newest(let v):
        if start <= 1 && 1 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
      case .oldest(let v):
        if start <= 2 && 2 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
      case .specified(let v):
        if start <= 3 && 3 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        }
      }
    }
  }

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1, 2, 3:
      if _storage._type != nil {
        try decoder.handleConflictingOneOf()
      }
      _storage._type = try Orderer_SeekPosition.OneOf_Type(byDecodingFrom: &decoder, fieldNumber: fieldNumber)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      try _storage._type?.traverse(visitor: &visitor, start: 1, end: 4)
    }
  }

  func _protobuf_generated_isEqualTo(other: Orderer_SeekPosition) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._type != other_storage._type {return false}
      }
      return true
    }
  }
}

///   SeekInfo specifies the range of requested blocks to return
///   If the start position is not found, an error is immediately returned
///   Otherwise, blocks are returned until a missing block is encountered, then behavior is dictated
///   by the SeekBehavior specified.  If BLOCK_UNTIL_READY is specified, the reply will block until
///   the requested blocks are available, if FAIL_IF_NOT_READY is specified, the reply will return an
///   error indicating that the block is not found.  To request that all blocks be returned indefinitely
///   as they are created, behavior should be set to BLOCK_UNTIL_READY and the stop should be set to
///   specified with a number of MAX_UINT64
struct Orderer_SeekInfo: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SeekInfo"
  static let protoPackageName: String = "orderer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "start"),
    2: .same(proto: "stop"),
    3: .same(proto: "behavior"),
  ]

  private class _StorageClass {
    var _start: Orderer_SeekPosition? = nil
    var _stop: Orderer_SeekPosition? = nil
    var _behavior: Orderer_SeekInfo.SeekBehavior = Orderer_SeekInfo.SeekBehavior.blockUntilReady

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._start = _start
      clone._stop = _stop
      clone._behavior = _behavior
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  ///   The position to start the deliver from
  var start: Orderer_SeekPosition {
    get {return _storage._start ?? Orderer_SeekPosition()}
    set {_uniqueStorage()._start = newValue}
  }
  var hasStart: Bool {
    return _storage._start != nil
  }
  mutating func clearStart() {
    return _storage._start = nil
  }

  ///   The position to stop the deliver
  var stop: Orderer_SeekPosition {
    get {return _storage._stop ?? Orderer_SeekPosition()}
    set {_uniqueStorage()._stop = newValue}
  }
  var hasStop: Bool {
    return _storage._stop != nil
  }
  mutating func clearStop() {
    return _storage._stop = nil
  }

  ///   The behavior when a missing block is encountered
  var behavior: Orderer_SeekInfo.SeekBehavior {
    get {return _storage._behavior}
    set {_uniqueStorage()._behavior = newValue}
  }

  enum SeekBehavior: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    typealias RawValue = Int
    case blockUntilReady // = 0
    case failIfNotReady // = 1
    case UNRECOGNIZED(Int)

    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "BLOCK_UNTIL_READY"),
      1: .same(proto: "FAIL_IF_NOT_READY"),
    ]

    init() {
      self = .blockUntilReady
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .blockUntilReady
      case 1: self = .failIfNotReady
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .blockUntilReady: return 0
      case .failIfNotReady: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularMessageField(value: &_storage._start)
    case 2: try decoder.decodeSingularMessageField(value: &_storage._stop)
    case 3: try decoder.decodeSingularEnumField(value: &_storage._behavior)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._start {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._stop {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._behavior != Orderer_SeekInfo.SeekBehavior.blockUntilReady {
        try visitor.visitSingularEnumField(value: _storage._behavior, fieldNumber: 3)
      }
    }
  }

  func _protobuf_generated_isEqualTo(other: Orderer_SeekInfo) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._start != other_storage._start {return false}
        if _storage._stop != other_storage._stop {return false}
        if _storage._behavior != other_storage._behavior {return false}
      }
      return true
    }
  }
}

struct Orderer_DeliverResponse: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DeliverResponse"
  static let protoPackageName: String = "orderer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "block"),
  ]

  private class _StorageClass {
    var _type: Orderer_DeliverResponse.OneOf_Type?

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._type = _type
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  var status: Common_Status {
    get {
      if case .status(let v)? = _storage._type {
        return v
      }
      return Common_Status.unknown
    }
    set {
      _uniqueStorage()._type = .status(newValue)
    }
  }

  var block: Common_Block {
    get {
      if case .block(let v)? = _storage._type {
        return v
      }
      return Common_Block()
    }
    set {
      _uniqueStorage()._type = .block(newValue)
    }
  }

  var type: OneOf_Type? {
    get {return _storage._type}
    set {
      _uniqueStorage()._type = newValue
    }
  }

  enum OneOf_Type: Equatable {
    case status(Common_Status)
    case block(Common_Block)

    static func ==(lhs: Orderer_DeliverResponse.OneOf_Type, rhs: Orderer_DeliverResponse.OneOf_Type) -> Bool {
      switch (lhs, rhs) {
      case (.status(let l), .status(let r)): return l == r
      case (.block(let l), .block(let r)): return l == r
      default: return false
      }
    }

    fileprivate init?<T: SwiftProtobuf.Decoder>(byDecodingFrom decoder: inout T, fieldNumber: Int) throws {
      switch fieldNumber {
      case 1:
        var value = Common_Status()
        try decoder.decodeSingularEnumField(value: &value)
        self = .status(value)
        return
      case 2:
        var value: Common_Block?
        try decoder.decodeSingularMessageField(value: &value)
        if let value = value {
          self = .block(value)
          return
        }
      default:
        break
      }
      return nil
    }

    fileprivate func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V, start: Int, end: Int) throws {
      switch self {
      case .status(let v):
        if start <= 1 && 1 < end {
          try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
        }
      case .block(let v):
        if start <= 2 && 2 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
      }
    }
  }

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1, 2:
      if _storage._type != nil {
        try decoder.handleConflictingOneOf()
      }
      _storage._type = try Orderer_DeliverResponse.OneOf_Type(byDecodingFrom: &decoder, fieldNumber: fieldNumber)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      try _storage._type?.traverse(visitor: &visitor, start: 1, end: 3)
    }
  }

  func _protobuf_generated_isEqualTo(other: Orderer_DeliverResponse) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._type != other_storage._type {return false}
      }
      return true
    }
  }
}
