/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: orderer/ab.proto
 *
 */

// 
// Copyright IBM Corp. 2016 All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf


struct Orderer_BroadcastResponse: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Orderer_BroadcastResponse"}
  public var protoMessageName: String {return "BroadcastResponse"}
  public var protoPackageName: String {return "orderer"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "status", swift: "status"),
  ]


  var status: Common_Status = Common_Status.unknown

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: Common_Status.self, value: &status)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if status != Common_Status.unknown {
      try visitor.visitSingularField(fieldType: Common_Status.self, value: status, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Orderer_BroadcastResponse) -> Bool {
    if status != other.status {return false}
    return true
  }
}

struct Orderer_SeekNewest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Orderer_SeekNewest"}
  public var protoMessageName: String {return "SeekNewest"}
  public var protoPackageName: String {return "orderer"}
  public static let _protobuf_fieldNames = FieldNameMap()


  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
  }

  public func _protoc_generated_isEqualTo(other: Orderer_SeekNewest) -> Bool {
    return true
  }
}

struct Orderer_SeekOldest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Orderer_SeekOldest"}
  public var protoMessageName: String {return "SeekOldest"}
  public var protoPackageName: String {return "orderer"}
  public static let _protobuf_fieldNames = FieldNameMap()


  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
  }

  public func _protoc_generated_isEqualTo(other: Orderer_SeekOldest) -> Bool {
    return true
  }
}

struct Orderer_SeekSpecified: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Orderer_SeekSpecified"}
  public var protoMessageName: String {return "SeekSpecified"}
  public var protoPackageName: String {return "orderer"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "number", swift: "number"),
  ]


  var number: UInt64 = 0

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: &number)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if number != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: number, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Orderer_SeekSpecified) -> Bool {
    if number != other.number {return false}
    return true
  }
}

struct Orderer_SeekPosition: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Orderer_SeekPosition"}
  public var protoMessageName: String {return "SeekPosition"}
  public var protoPackageName: String {return "orderer"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "newest", swift: "newest"),
    2: .same(proto: "oldest", swift: "oldest"),
    3: .same(proto: "specified", swift: "specified"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Orderer_SeekPosition
    var _type = Orderer_SeekPosition.OneOf_Type()

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1, 2, 3: try _type.decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      try _type.traverse(visitor: visitor, start: 1, end: 4)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _type != other._type {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._type = _type
      return clone
    }
  }

  private var _storage = _StorageClass()


  enum OneOf_Type: ExpressibleByNilLiteral, SwiftProtobuf.OneofEnum {
    case newest(Orderer_SeekNewest)
    case oldest(Orderer_SeekOldest)
    case specified(Orderer_SeekSpecified)
    case None

    static func ==(lhs: Orderer_SeekPosition.OneOf_Type, rhs: Orderer_SeekPosition.OneOf_Type) -> Bool {
      switch (lhs, rhs) {
      case (.newest(let l), .newest(let r)): return l == r
      case (.oldest(let l), .oldest(let r)): return l == r
      case (.specified(let l), .specified(let r)): return l == r
      case (.None, .None): return true
      default: return false
      }
    }

    public init(nilLiteral: ()) {
      self = .None
    }

    public init() {
      self = .None
    }

    public mutating func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      if self != .None && setter.rejectConflictingOneof {
        throw SwiftProtobuf.DecodingError.duplicatedOneOf
      }
      switch protoFieldNumber {
      case 1:
        var value: Orderer_SeekNewest?
        try setter.decodeSingularMessageField(fieldType: Orderer_SeekNewest.self, value: &value)
        if let value = value {
          self = .newest(value)
        }
      case 2:
        var value: Orderer_SeekOldest?
        try setter.decodeSingularMessageField(fieldType: Orderer_SeekOldest.self, value: &value)
        if let value = value {
          self = .oldest(value)
        }
      case 3:
        var value: Orderer_SeekSpecified?
        try setter.decodeSingularMessageField(fieldType: Orderer_SeekSpecified.self, value: &value)
        if let value = value {
          self = .specified(value)
        }
      default:
        self = .None
      }
    }

    public func traverse(visitor: SwiftProtobuf.Visitor, start: Int, end: Int) throws {
      switch self {
      case .newest(let v):
        if start <= 1 && 1 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
      case .oldest(let v):
        if start <= 2 && 2 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
      case .specified(let v):
        if start <= 3 && 3 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        }
      case .None:
        break
      }
    }
  }

  var newest: Orderer_SeekNewest {
    get {
      if case .newest(let v) = _storage._type {
        return v
      }
      return Orderer_SeekNewest()
    }
    set {
      _uniqueStorage()._type = .newest(newValue)
    }
  }

  var oldest: Orderer_SeekOldest {
    get {
      if case .oldest(let v) = _storage._type {
        return v
      }
      return Orderer_SeekOldest()
    }
    set {
      _uniqueStorage()._type = .oldest(newValue)
    }
  }

  var specified: Orderer_SeekSpecified {
    get {
      if case .specified(let v) = _storage._type {
        return v
      }
      return Orderer_SeekSpecified()
    }
    set {
      _uniqueStorage()._type = .specified(newValue)
    }
  }

  public var type: OneOf_Type {
    get {return _storage._type}
    set {
      _uniqueStorage()._type = newValue
    }
  }

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Orderer_SeekPosition) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   SeekInfo specifies the range of requested blocks to return
///   If the start position is not found, an error is immediately returned
///   Otherwise, blocks are returned until a missing block is encountered, then behavior is dictated
///   by the SeekBehavior specified.  If BLOCK_UNTIL_READY is specified, the reply will block until
///   the requested blocks are available, if FAIL_IF_NOT_READY is specified, the reply will return an
///   error indicating that the block is not found.  To request that all blocks be returned indefinitely
///   as they are created, behavior should be set to BLOCK_UNTIL_READY and the stop should be set to
///   specified with a number of MAX_UINT64
struct Orderer_SeekInfo: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Orderer_SeekInfo"}
  public var protoMessageName: String {return "SeekInfo"}
  public var protoPackageName: String {return "orderer"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "start", swift: "start"),
    2: .same(proto: "stop", swift: "stop"),
    3: .same(proto: "behavior", swift: "behavior"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Orderer_SeekInfo
    var _start: Orderer_SeekPosition? = nil
    var _stop: Orderer_SeekPosition? = nil
    var _behavior: Orderer_SeekInfo.SeekBehavior = Orderer_SeekInfo.SeekBehavior.blockUntilReady

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Orderer_SeekPosition.self, value: &_start)
      case 2: try setter.decodeSingularMessageField(fieldType: Orderer_SeekPosition.self, value: &_stop)
      case 3: try setter.decodeSingularField(fieldType: Orderer_SeekInfo.SeekBehavior.self, value: &_behavior)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _start {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _stop {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _behavior != Orderer_SeekInfo.SeekBehavior.blockUntilReady {
        try visitor.visitSingularField(fieldType: Orderer_SeekInfo.SeekBehavior.self, value: _behavior, fieldNumber: 3)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _start != other._start {return false}
      if _stop != other._stop {return false}
      if _behavior != other._behavior {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._start = _start
      clone._stop = _stop
      clone._behavior = _behavior
      return clone
    }
  }

  private var _storage = _StorageClass()


  enum SeekBehavior: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case blockUntilReady // = 0
    case failIfNotReady // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .blockUntilReady
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .blockUntilReady
      case 1: self = .failIfNotReady
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    init?(name: String) {
      switch name {
      case "blockUntilReady": self = .blockUntilReady
      case "failIfNotReady": self = .failIfNotReady
      default: return nil
      }
    }

    init?(jsonName: String) {
      switch jsonName {
      case "BLOCK_UNTIL_READY": self = .blockUntilReady
      case "FAIL_IF_NOT_READY": self = .failIfNotReady
      default: return nil
      }
    }

    init?(protoName: String) {
      switch protoName {
      case "BLOCK_UNTIL_READY": self = .blockUntilReady
      case "FAIL_IF_NOT_READY": self = .failIfNotReady
      default: return nil
      }
    }

    var rawValue: Int {
      get {
        switch self {
        case .blockUntilReady: return 0
        case .failIfNotReady: return 1
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    var json: String {
      get {
        switch self {
        case .blockUntilReady: return "\"BLOCK_UNTIL_READY\""
        case .failIfNotReady: return "\"FAIL_IF_NOT_READY\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    var hashValue: Int { return rawValue }

    var debugDescription: String {
      get {
        switch self {
        case .blockUntilReady: return ".blockUntilReady"
        case .failIfNotReady: return ".failIfNotReady"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  ///   The position to start the deliver from
  var start: Orderer_SeekPosition {
    get {return _storage._start ?? Orderer_SeekPosition()}
    set {_uniqueStorage()._start = newValue}
  }
  public var hasStart: Bool {
    return _storage._start != nil
  }
  public mutating func clearStart() {
    return _storage._start = nil
  }

  ///   The position to stop the deliver
  var stop: Orderer_SeekPosition {
    get {return _storage._stop ?? Orderer_SeekPosition()}
    set {_uniqueStorage()._stop = newValue}
  }
  public var hasStop: Bool {
    return _storage._stop != nil
  }
  public mutating func clearStop() {
    return _storage._stop = nil
  }

  ///   The behavior when a missing block is encountered
  var behavior: Orderer_SeekInfo.SeekBehavior {
    get {return _storage._behavior}
    set {_uniqueStorage()._behavior = newValue}
  }

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Orderer_SeekInfo) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

struct Orderer_DeliverResponse: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Orderer_DeliverResponse"}
  public var protoMessageName: String {return "DeliverResponse"}
  public var protoPackageName: String {return "orderer"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "status", swift: "status"),
    2: .same(proto: "block", swift: "block"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Orderer_DeliverResponse
    var _type = Orderer_DeliverResponse.OneOf_Type()

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1, 2: try _type.decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      try _type.traverse(visitor: visitor, start: 1, end: 3)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _type != other._type {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._type = _type
      return clone
    }
  }

  private var _storage = _StorageClass()


  enum OneOf_Type: ExpressibleByNilLiteral, SwiftProtobuf.OneofEnum {
    case status(Common_Status)
    case block(Common_Block)
    case None

    static func ==(lhs: Orderer_DeliverResponse.OneOf_Type, rhs: Orderer_DeliverResponse.OneOf_Type) -> Bool {
      switch (lhs, rhs) {
      case (.status(let l), .status(let r)): return l == r
      case (.block(let l), .block(let r)): return l == r
      case (.None, .None): return true
      default: return false
      }
    }

    public init(nilLiteral: ()) {
      self = .None
    }

    public init() {
      self = .None
    }

    public mutating func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      if self != .None && setter.rejectConflictingOneof {
        throw SwiftProtobuf.DecodingError.duplicatedOneOf
      }
      switch protoFieldNumber {
      case 1:
        var value = Common_Status()
        try setter.decodeSingularField(fieldType: Common_Status.self, value: &value)
        self = .status(value)
      case 2:
        var value: Common_Block?
        try setter.decodeSingularMessageField(fieldType: Common_Block.self, value: &value)
        if let value = value {
          self = .block(value)
        }
      default:
        self = .None
      }
    }

    public func traverse(visitor: SwiftProtobuf.Visitor, start: Int, end: Int) throws {
      switch self {
      case .status(let v):
        if start <= 1 && 1 < end {
          try visitor.visitSingularField(fieldType: Common_Status.self, value: v, fieldNumber: 1)
        }
      case .block(let v):
        if start <= 2 && 2 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
      case .None:
        break
      }
    }
  }

  var status: Common_Status {
    get {
      if case .status(let v) = _storage._type {
        return v
      }
      return Common_Status.unknown
    }
    set {
      _uniqueStorage()._type = .status(newValue)
    }
  }

  var block: Common_Block {
    get {
      if case .block(let v) = _storage._type {
        return v
      }
      return Common_Block()
    }
    set {
      _uniqueStorage()._type = .block(newValue)
    }
  }

  public var type: OneOf_Type {
    get {return _storage._type}
    set {
      _uniqueStorage()._type = newValue
    }
  }

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Orderer_DeliverResponse) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}
