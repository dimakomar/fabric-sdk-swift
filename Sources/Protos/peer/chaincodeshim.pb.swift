/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: peer/chaincodeshim.proto
 *
 */

// 
// Copyright IBM Corp. 2016 All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf


struct Protos_ChaincodeMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Protos_ChaincodeMessage"}
  public var protoMessageName: String {return "ChaincodeMessage"}
  public var protoPackageName: String {return "protos"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "type", swift: "type"),
    2: .same(proto: "timestamp", swift: "timestamp"),
    3: .same(proto: "payload", swift: "payload"),
    4: .same(proto: "txid", swift: "txid"),
    5: .same(proto: "proposal", swift: "proposal"),
    6: .unique(proto: "chaincode_event", json: "chaincodeEvent", swift: "chaincodeEvent"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Protos_ChaincodeMessage
    var _type: Protos_ChaincodeMessage.TypeEnum = Protos_ChaincodeMessage.TypeEnum.undefined
    var _timestamp: Google_Protobuf_Timestamp? = nil
    var _payload: Data = Data()
    var _txid: String = ""
    var _proposal: Protos_Proposal? = nil
    var _chaincodeEvent: Protos_ChaincodeEvent? = nil

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: Protos_ChaincodeMessage.TypeEnum.self, value: &_type)
      case 2: try setter.decodeSingularMessageField(fieldType: Google_Protobuf_Timestamp.self, value: &_timestamp)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_payload)
      case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_txid)
      case 5: try setter.decodeSingularMessageField(fieldType: Protos_Proposal.self, value: &_proposal)
      case 6: try setter.decodeSingularMessageField(fieldType: Protos_ChaincodeEvent.self, value: &_chaincodeEvent)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _type != Protos_ChaincodeMessage.TypeEnum.undefined {
        try visitor.visitSingularField(fieldType: Protos_ChaincodeMessage.TypeEnum.self, value: _type, fieldNumber: 1)
      }
      if let v = _timestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _payload != Data() {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: _payload, fieldNumber: 3)
      }
      if _txid != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _txid, fieldNumber: 4)
      }
      if let v = _proposal {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _chaincodeEvent {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _type != other._type {return false}
      if _timestamp != other._timestamp {return false}
      if _payload != other._payload {return false}
      if _txid != other._txid {return false}
      if _proposal != other._proposal {return false}
      if _chaincodeEvent != other._chaincodeEvent {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._type = _type
      clone._timestamp = _timestamp
      clone._payload = _payload
      clone._txid = _txid
      clone._proposal = _proposal
      clone._chaincodeEvent = _chaincodeEvent
      return clone
    }
  }

  private var _storage = _StorageClass()


  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case undefined // = 0
    case register // = 1
    case registered // = 2
    case init_ // = 3
    case ready // = 4
    case transaction // = 5
    case completed // = 6
    case error // = 7
    case getState // = 8
    case putState // = 9
    case delState // = 10
    case invokeChaincode // = 11
    case response // = 13
    case getStateByRange // = 14
    case getQueryResult // = 15
    case queryStateNext // = 16
    case queryStateClose // = 17
    case keepalive // = 18
    case getHistoryForKey // = 19
    case UNRECOGNIZED(Int)

    init() {
      self = .undefined
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .undefined
      case 1: self = .register
      case 2: self = .registered
      case 3: self = .init_
      case 4: self = .ready
      case 5: self = .transaction
      case 6: self = .completed
      case 7: self = .error
      case 8: self = .getState
      case 9: self = .putState
      case 10: self = .delState
      case 11: self = .invokeChaincode
      case 13: self = .response
      case 14: self = .getStateByRange
      case 15: self = .getQueryResult
      case 16: self = .queryStateNext
      case 17: self = .queryStateClose
      case 18: self = .keepalive
      case 19: self = .getHistoryForKey
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    init?(name: String) {
      switch name {
      case "undefined": self = .undefined
      case "register": self = .register
      case "registered": self = .registered
      case "init_": self = .init_
      case "ready": self = .ready
      case "transaction": self = .transaction
      case "completed": self = .completed
      case "error": self = .error
      case "getState": self = .getState
      case "putState": self = .putState
      case "delState": self = .delState
      case "invokeChaincode": self = .invokeChaincode
      case "response": self = .response
      case "getStateByRange": self = .getStateByRange
      case "getQueryResult": self = .getQueryResult
      case "queryStateNext": self = .queryStateNext
      case "queryStateClose": self = .queryStateClose
      case "keepalive": self = .keepalive
      case "getHistoryForKey": self = .getHistoryForKey
      default: return nil
      }
    }

    init?(jsonName: String) {
      switch jsonName {
      case "UNDEFINED": self = .undefined
      case "REGISTER": self = .register
      case "REGISTERED": self = .registered
      case "INIT": self = .init_
      case "READY": self = .ready
      case "TRANSACTION": self = .transaction
      case "COMPLETED": self = .completed
      case "ERROR": self = .error
      case "GET_STATE": self = .getState
      case "PUT_STATE": self = .putState
      case "DEL_STATE": self = .delState
      case "INVOKE_CHAINCODE": self = .invokeChaincode
      case "RESPONSE": self = .response
      case "GET_STATE_BY_RANGE": self = .getStateByRange
      case "GET_QUERY_RESULT": self = .getQueryResult
      case "QUERY_STATE_NEXT": self = .queryStateNext
      case "QUERY_STATE_CLOSE": self = .queryStateClose
      case "KEEPALIVE": self = .keepalive
      case "GET_HISTORY_FOR_KEY": self = .getHistoryForKey
      default: return nil
      }
    }

    init?(protoName: String) {
      switch protoName {
      case "UNDEFINED": self = .undefined
      case "REGISTER": self = .register
      case "REGISTERED": self = .registered
      case "INIT": self = .init_
      case "READY": self = .ready
      case "TRANSACTION": self = .transaction
      case "COMPLETED": self = .completed
      case "ERROR": self = .error
      case "GET_STATE": self = .getState
      case "PUT_STATE": self = .putState
      case "DEL_STATE": self = .delState
      case "INVOKE_CHAINCODE": self = .invokeChaincode
      case "RESPONSE": self = .response
      case "GET_STATE_BY_RANGE": self = .getStateByRange
      case "GET_QUERY_RESULT": self = .getQueryResult
      case "QUERY_STATE_NEXT": self = .queryStateNext
      case "QUERY_STATE_CLOSE": self = .queryStateClose
      case "KEEPALIVE": self = .keepalive
      case "GET_HISTORY_FOR_KEY": self = .getHistoryForKey
      default: return nil
      }
    }

    var rawValue: Int {
      get {
        switch self {
        case .undefined: return 0
        case .register: return 1
        case .registered: return 2
        case .init_: return 3
        case .ready: return 4
        case .transaction: return 5
        case .completed: return 6
        case .error: return 7
        case .getState: return 8
        case .putState: return 9
        case .delState: return 10
        case .invokeChaincode: return 11
        case .response: return 13
        case .getStateByRange: return 14
        case .getQueryResult: return 15
        case .queryStateNext: return 16
        case .queryStateClose: return 17
        case .keepalive: return 18
        case .getHistoryForKey: return 19
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    var json: String {
      get {
        switch self {
        case .undefined: return "\"UNDEFINED\""
        case .register: return "\"REGISTER\""
        case .registered: return "\"REGISTERED\""
        case .init_: return "\"INIT\""
        case .ready: return "\"READY\""
        case .transaction: return "\"TRANSACTION\""
        case .completed: return "\"COMPLETED\""
        case .error: return "\"ERROR\""
        case .getState: return "\"GET_STATE\""
        case .putState: return "\"PUT_STATE\""
        case .delState: return "\"DEL_STATE\""
        case .invokeChaincode: return "\"INVOKE_CHAINCODE\""
        case .response: return "\"RESPONSE\""
        case .getStateByRange: return "\"GET_STATE_BY_RANGE\""
        case .getQueryResult: return "\"GET_QUERY_RESULT\""
        case .queryStateNext: return "\"QUERY_STATE_NEXT\""
        case .queryStateClose: return "\"QUERY_STATE_CLOSE\""
        case .keepalive: return "\"KEEPALIVE\""
        case .getHistoryForKey: return "\"GET_HISTORY_FOR_KEY\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    var hashValue: Int { return rawValue }

    var debugDescription: String {
      get {
        switch self {
        case .undefined: return ".undefined"
        case .register: return ".register"
        case .registered: return ".registered"
        case .init_: return ".init_"
        case .ready: return ".ready"
        case .transaction: return ".transaction"
        case .completed: return ".completed"
        case .error: return ".error"
        case .getState: return ".getState"
        case .putState: return ".putState"
        case .delState: return ".delState"
        case .invokeChaincode: return ".invokeChaincode"
        case .response: return ".response"
        case .getStateByRange: return ".getStateByRange"
        case .getQueryResult: return ".getQueryResult"
        case .queryStateNext: return ".queryStateNext"
        case .queryStateClose: return ".queryStateClose"
        case .keepalive: return ".keepalive"
        case .getHistoryForKey: return ".getHistoryForKey"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  var type: Protos_ChaincodeMessage.TypeEnum {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var timestamp: Google_Protobuf_Timestamp {
    get {return _storage._timestamp ?? Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._timestamp = newValue}
  }
  public var hasTimestamp: Bool {
    return _storage._timestamp != nil
  }
  public mutating func clearTimestamp() {
    return _storage._timestamp = nil
  }

  var payload: Data {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  var txid: String {
    get {return _storage._txid}
    set {_uniqueStorage()._txid = newValue}
  }

  var proposal: Protos_Proposal {
    get {return _storage._proposal ?? Protos_Proposal()}
    set {_uniqueStorage()._proposal = newValue}
  }
  public var hasProposal: Bool {
    return _storage._proposal != nil
  }
  public mutating func clearProposal() {
    return _storage._proposal = nil
  }

  ///  event emmited by chaincode. Used only with Init or Invoke.
  ///   This event is then stored (currently)
  ///  with Block.NonHashData.TransactionResult
  var chaincodeEvent: Protos_ChaincodeEvent {
    get {return _storage._chaincodeEvent ?? Protos_ChaincodeEvent()}
    set {_uniqueStorage()._chaincodeEvent = newValue}
  }
  public var hasChaincodeEvent: Bool {
    return _storage._chaincodeEvent != nil
  }
  public mutating func clearChaincodeEvent() {
    return _storage._chaincodeEvent = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Protos_ChaincodeMessage) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

struct Protos_PutStateInfo: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Protos_PutStateInfo"}
  public var protoMessageName: String {return "PutStateInfo"}
  public var protoPackageName: String {return "protos"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "key", swift: "key"),
    2: .same(proto: "value", swift: "value"),
  ]


  var key: String = ""

  var value: Data = Data()

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &key)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &value)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if key != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: key, fieldNumber: 1)
    }
    if value != Data() {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: value, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Protos_PutStateInfo) -> Bool {
    if key != other.key {return false}
    if value != other.value {return false}
    return true
  }
}

struct Protos_GetStateByRange: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Protos_GetStateByRange"}
  public var protoMessageName: String {return "GetStateByRange"}
  public var protoPackageName: String {return "protos"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "startKey", swift: "startKey"),
    2: .same(proto: "endKey", swift: "endKey"),
  ]


  var startKey: String = ""

  var endKey: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &startKey)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &endKey)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if startKey != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: startKey, fieldNumber: 1)
    }
    if endKey != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: endKey, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Protos_GetStateByRange) -> Bool {
    if startKey != other.startKey {return false}
    if endKey != other.endKey {return false}
    return true
  }
}

struct Protos_GetQueryResult: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Protos_GetQueryResult"}
  public var protoMessageName: String {return "GetQueryResult"}
  public var protoPackageName: String {return "protos"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "query", swift: "query"),
  ]


  var query: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &query)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if query != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: query, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Protos_GetQueryResult) -> Bool {
    if query != other.query {return false}
    return true
  }
}

struct Protos_GetHistoryForKey: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Protos_GetHistoryForKey"}
  public var protoMessageName: String {return "GetHistoryForKey"}
  public var protoPackageName: String {return "protos"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "key", swift: "key"),
  ]


  var key: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &key)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if key != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: key, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Protos_GetHistoryForKey) -> Bool {
    if key != other.key {return false}
    return true
  }
}

struct Protos_QueryStateNext: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Protos_QueryStateNext"}
  public var protoMessageName: String {return "QueryStateNext"}
  public var protoPackageName: String {return "protos"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "id", swift: "id"),
  ]


  var id: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &id)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if id != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: id, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Protos_QueryStateNext) -> Bool {
    if id != other.id {return false}
    return true
  }
}

struct Protos_QueryStateClose: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Protos_QueryStateClose"}
  public var protoMessageName: String {return "QueryStateClose"}
  public var protoPackageName: String {return "protos"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "id", swift: "id"),
  ]


  var id: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &id)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if id != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: id, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Protos_QueryStateClose) -> Bool {
    if id != other.id {return false}
    return true
  }
}

struct Protos_QueryStateKeyValue: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Protos_QueryStateKeyValue"}
  public var protoMessageName: String {return "QueryStateKeyValue"}
  public var protoPackageName: String {return "protos"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "key", swift: "key"),
    2: .same(proto: "value", swift: "value"),
  ]


  var key: String = ""

  var value: Data = Data()

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &key)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &value)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if key != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: key, fieldNumber: 1)
    }
    if value != Data() {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: value, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Protos_QueryStateKeyValue) -> Bool {
    if key != other.key {return false}
    if value != other.value {return false}
    return true
  }
}

struct Protos_QueryStateResponse: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Protos_QueryStateResponse"}
  public var protoMessageName: String {return "QueryStateResponse"}
  public var protoPackageName: String {return "protos"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "keys_and_values", json: "keysAndValues", swift: "keysAndValues"),
    2: .unique(proto: "has_more", json: "hasMore", swift: "hasMore"),
    3: .same(proto: "id", swift: "id"),
  ]


  var keysAndValues: [Protos_QueryStateKeyValue] = []

  var hasMore: Bool = false

  var id: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: Protos_QueryStateKeyValue.self, value: &keysAndValues)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &hasMore)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &id)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !keysAndValues.isEmpty {
      try visitor.visitRepeatedMessageField(value: keysAndValues, fieldNumber: 1)
    }
    if hasMore != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: hasMore, fieldNumber: 2)
    }
    if id != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: id, fieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: Protos_QueryStateResponse) -> Bool {
    if keysAndValues != other.keysAndValues {return false}
    if hasMore != other.hasMore {return false}
    if id != other.id {return false}
    return true
  }
}
