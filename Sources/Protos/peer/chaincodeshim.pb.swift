/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: peer/chaincodeshim.proto
 *
 */

// 
// Copyright IBM Corp. 2016 All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

struct Protos_ChaincodeMessage: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ChaincodeMessage"
  static let protoPackageName: String = "protos"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "timestamp"),
    3: .same(proto: "payload"),
    4: .same(proto: "txid"),
    5: .same(proto: "proposal"),
    6: .unique(proto: "chaincode_event", json: "chaincodeEvent"),
  ]

  private class _StorageClass {
    var _type: Protos_ChaincodeMessage.TypeEnum = Protos_ChaincodeMessage.TypeEnum.undefined
    var _timestamp: Google_Protobuf_Timestamp? = nil
    var _payload: Data = Data()
    var _txid: String = ""
    var _proposal: Protos_Proposal? = nil
    var _chaincodeEvent: Protos_ChaincodeEvent? = nil

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._type = _type
      clone._timestamp = _timestamp
      clone._payload = _payload
      clone._txid = _txid
      clone._proposal = _proposal
      clone._chaincodeEvent = _chaincodeEvent
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  var type: Protos_ChaincodeMessage.TypeEnum {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var timestamp: Google_Protobuf_Timestamp {
    get {return _storage._timestamp ?? Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._timestamp = newValue}
  }
  var hasTimestamp: Bool {
    return _storage._timestamp != nil
  }
  mutating func clearTimestamp() {
    return _storage._timestamp = nil
  }

  var payload: Data {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  var txid: String {
    get {return _storage._txid}
    set {_uniqueStorage()._txid = newValue}
  }

  var proposal: Protos_Proposal {
    get {return _storage._proposal ?? Protos_Proposal()}
    set {_uniqueStorage()._proposal = newValue}
  }
  var hasProposal: Bool {
    return _storage._proposal != nil
  }
  mutating func clearProposal() {
    return _storage._proposal = nil
  }

  ///  event emmited by chaincode. Used only with Init or Invoke.
  ///   This event is then stored (currently)
  ///  with Block.NonHashData.TransactionResult
  var chaincodeEvent: Protos_ChaincodeEvent {
    get {return _storage._chaincodeEvent ?? Protos_ChaincodeEvent()}
    set {_uniqueStorage()._chaincodeEvent = newValue}
  }
  var hasChaincodeEvent: Bool {
    return _storage._chaincodeEvent != nil
  }
  mutating func clearChaincodeEvent() {
    return _storage._chaincodeEvent = nil
  }

  enum TypeEnum: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    typealias RawValue = Int
    case undefined // = 0
    case register // = 1
    case registered // = 2
    case init_ // = 3
    case ready // = 4
    case transaction // = 5
    case completed // = 6
    case error // = 7
    case getState // = 8
    case putState // = 9
    case delState // = 10
    case invokeChaincode // = 11
    case response // = 13
    case getStateByRange // = 14
    case getQueryResult // = 15
    case queryStateNext // = 16
    case queryStateClose // = 17
    case keepalive // = 18
    case getHistoryForKey // = 19
    case UNRECOGNIZED(Int)

    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "UNDEFINED"),
      1: .same(proto: "REGISTER"),
      2: .same(proto: "REGISTERED"),
      3: .same(proto: "INIT"),
      4: .same(proto: "READY"),
      5: .same(proto: "TRANSACTION"),
      6: .same(proto: "COMPLETED"),
      7: .same(proto: "ERROR"),
      8: .same(proto: "GET_STATE"),
      9: .same(proto: "PUT_STATE"),
      10: .same(proto: "DEL_STATE"),
      11: .same(proto: "INVOKE_CHAINCODE"),
      13: .same(proto: "RESPONSE"),
      14: .same(proto: "GET_STATE_BY_RANGE"),
      15: .same(proto: "GET_QUERY_RESULT"),
      16: .same(proto: "QUERY_STATE_NEXT"),
      17: .same(proto: "QUERY_STATE_CLOSE"),
      18: .same(proto: "KEEPALIVE"),
      19: .same(proto: "GET_HISTORY_FOR_KEY"),
    ]

    init() {
      self = .undefined
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .undefined
      case 1: self = .register
      case 2: self = .registered
      case 3: self = .init_
      case 4: self = .ready
      case 5: self = .transaction
      case 6: self = .completed
      case 7: self = .error
      case 8: self = .getState
      case 9: self = .putState
      case 10: self = .delState
      case 11: self = .invokeChaincode
      case 13: self = .response
      case 14: self = .getStateByRange
      case 15: self = .getQueryResult
      case 16: self = .queryStateNext
      case 17: self = .queryStateClose
      case 18: self = .keepalive
      case 19: self = .getHistoryForKey
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .undefined: return 0
      case .register: return 1
      case .registered: return 2
      case .init_: return 3
      case .ready: return 4
      case .transaction: return 5
      case .completed: return 6
      case .error: return 7
      case .getState: return 8
      case .putState: return 9
      case .delState: return 10
      case .invokeChaincode: return 11
      case .response: return 13
      case .getStateByRange: return 14
      case .getQueryResult: return 15
      case .queryStateNext: return 16
      case .queryStateClose: return 17
      case .keepalive: return 18
      case .getHistoryForKey: return 19
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
    case 2: try decoder.decodeSingularMessageField(value: &_storage._timestamp)
    case 3: try decoder.decodeSingularBytesField(value: &_storage._payload)
    case 4: try decoder.decodeSingularStringField(value: &_storage._txid)
    case 5: try decoder.decodeSingularMessageField(value: &_storage._proposal)
    case 6: try decoder.decodeSingularMessageField(value: &_storage._chaincodeEvent)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._type != Protos_ChaincodeMessage.TypeEnum.undefined {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 1)
      }
      if let v = _storage._timestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._payload.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._payload, fieldNumber: 3)
      }
      if !_storage._txid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._txid, fieldNumber: 4)
      }
      if let v = _storage._proposal {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._chaincodeEvent {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
  }

  func _protobuf_generated_isEqualTo(other: Protos_ChaincodeMessage) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._type != other_storage._type {return false}
        if _storage._timestamp != other_storage._timestamp {return false}
        if _storage._payload != other_storage._payload {return false}
        if _storage._txid != other_storage._txid {return false}
        if _storage._proposal != other_storage._proposal {return false}
        if _storage._chaincodeEvent != other_storage._chaincodeEvent {return false}
      }
      return true
    }
  }
}

struct Protos_PutStateInfo: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PutStateInfo"
  static let protoPackageName: String = "protos"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  var key: String = ""

  var value: Data = Data()

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularStringField(value: &key)
    case 2: try decoder.decodeSingularBytesField(value: &value)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !key.isEmpty {
      try visitor.visitSingularStringField(value: key, fieldNumber: 1)
    }
    if !value.isEmpty {
      try visitor.visitSingularBytesField(value: value, fieldNumber: 2)
    }
  }

  func _protobuf_generated_isEqualTo(other: Protos_PutStateInfo) -> Bool {
    if key != other.key {return false}
    if value != other.value {return false}
    return true
  }
}

struct Protos_GetStateByRange: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetStateByRange"
  static let protoPackageName: String = "protos"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "startKey"),
    2: .same(proto: "endKey"),
  ]

  var startKey: String = ""

  var endKey: String = ""

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularStringField(value: &startKey)
    case 2: try decoder.decodeSingularStringField(value: &endKey)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !startKey.isEmpty {
      try visitor.visitSingularStringField(value: startKey, fieldNumber: 1)
    }
    if !endKey.isEmpty {
      try visitor.visitSingularStringField(value: endKey, fieldNumber: 2)
    }
  }

  func _protobuf_generated_isEqualTo(other: Protos_GetStateByRange) -> Bool {
    if startKey != other.startKey {return false}
    if endKey != other.endKey {return false}
    return true
  }
}

struct Protos_GetQueryResult: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetQueryResult"
  static let protoPackageName: String = "protos"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "query"),
  ]

  var query: String = ""

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularStringField(value: &query)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !query.isEmpty {
      try visitor.visitSingularStringField(value: query, fieldNumber: 1)
    }
  }

  func _protobuf_generated_isEqualTo(other: Protos_GetQueryResult) -> Bool {
    if query != other.query {return false}
    return true
  }
}

struct Protos_GetHistoryForKey: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetHistoryForKey"
  static let protoPackageName: String = "protos"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
  ]

  var key: String = ""

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularStringField(value: &key)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !key.isEmpty {
      try visitor.visitSingularStringField(value: key, fieldNumber: 1)
    }
  }

  func _protobuf_generated_isEqualTo(other: Protos_GetHistoryForKey) -> Bool {
    if key != other.key {return false}
    return true
  }
}

struct Protos_QueryStateNext: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "QueryStateNext"
  static let protoPackageName: String = "protos"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  var id: String = ""

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularStringField(value: &id)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !id.isEmpty {
      try visitor.visitSingularStringField(value: id, fieldNumber: 1)
    }
  }

  func _protobuf_generated_isEqualTo(other: Protos_QueryStateNext) -> Bool {
    if id != other.id {return false}
    return true
  }
}

struct Protos_QueryStateClose: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "QueryStateClose"
  static let protoPackageName: String = "protos"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  var id: String = ""

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularStringField(value: &id)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !id.isEmpty {
      try visitor.visitSingularStringField(value: id, fieldNumber: 1)
    }
  }

  func _protobuf_generated_isEqualTo(other: Protos_QueryStateClose) -> Bool {
    if id != other.id {return false}
    return true
  }
}

struct Protos_QueryStateKeyValue: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "QueryStateKeyValue"
  static let protoPackageName: String = "protos"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  var key: String = ""

  var value: Data = Data()

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularStringField(value: &key)
    case 2: try decoder.decodeSingularBytesField(value: &value)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !key.isEmpty {
      try visitor.visitSingularStringField(value: key, fieldNumber: 1)
    }
    if !value.isEmpty {
      try visitor.visitSingularBytesField(value: value, fieldNumber: 2)
    }
  }

  func _protobuf_generated_isEqualTo(other: Protos_QueryStateKeyValue) -> Bool {
    if key != other.key {return false}
    if value != other.value {return false}
    return true
  }
}

struct Protos_QueryStateResponse: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "QueryStateResponse"
  static let protoPackageName: String = "protos"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "keys_and_values", json: "keysAndValues"),
    2: .unique(proto: "has_more", json: "hasMore"),
    3: .same(proto: "id"),
  ]

  var keysAndValues: [Protos_QueryStateKeyValue] = []

  var hasMore: Bool = false

  var id: String = ""

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeRepeatedMessageField(value: &keysAndValues)
    case 2: try decoder.decodeSingularBoolField(value: &hasMore)
    case 3: try decoder.decodeSingularStringField(value: &id)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !keysAndValues.isEmpty {
      try visitor.visitRepeatedMessageField(value: keysAndValues, fieldNumber: 1)
    }
    if hasMore != false {
      try visitor.visitSingularBoolField(value: hasMore, fieldNumber: 2)
    }
    if !id.isEmpty {
      try visitor.visitSingularStringField(value: id, fieldNumber: 3)
    }
  }

  func _protobuf_generated_isEqualTo(other: Protos_QueryStateResponse) -> Bool {
    if keysAndValues != other.keysAndValues {return false}
    if hasMore != other.hasMore {return false}
    if id != other.id {return false}
    return true
  }
}
