/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: peer/admin.proto
 *
 */

// 
// Copyright IBM Corp. 2016 All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf


struct Protos_ServerStatus: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Protos_ServerStatus"}
  public var protoMessageName: String {return "ServerStatus"}
  public var protoPackageName: String {return "protos"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "status", swift: "status"),
  ]


  enum StatusCode: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case undefined // = 0
    case started // = 1
    case stopped // = 2
    case paused // = 3
    case error // = 4
    case unknown // = 5
    case UNRECOGNIZED(Int)

    init() {
      self = .undefined
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .undefined
      case 1: self = .started
      case 2: self = .stopped
      case 3: self = .paused
      case 4: self = .error
      case 5: self = .unknown
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    init?(name: String) {
      switch name {
      case "undefined": self = .undefined
      case "started": self = .started
      case "stopped": self = .stopped
      case "paused": self = .paused
      case "error": self = .error
      case "unknown": self = .unknown
      default: return nil
      }
    }

    init?(jsonName: String) {
      switch jsonName {
      case "UNDEFINED": self = .undefined
      case "STARTED": self = .started
      case "STOPPED": self = .stopped
      case "PAUSED": self = .paused
      case "ERROR": self = .error
      case "UNKNOWN": self = .unknown
      default: return nil
      }
    }

    init?(protoName: String) {
      switch protoName {
      case "UNDEFINED": self = .undefined
      case "STARTED": self = .started
      case "STOPPED": self = .stopped
      case "PAUSED": self = .paused
      case "ERROR": self = .error
      case "UNKNOWN": self = .unknown
      default: return nil
      }
    }

    var rawValue: Int {
      get {
        switch self {
        case .undefined: return 0
        case .started: return 1
        case .stopped: return 2
        case .paused: return 3
        case .error: return 4
        case .unknown: return 5
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    var json: String {
      get {
        switch self {
        case .undefined: return "\"UNDEFINED\""
        case .started: return "\"STARTED\""
        case .stopped: return "\"STOPPED\""
        case .paused: return "\"PAUSED\""
        case .error: return "\"ERROR\""
        case .unknown: return "\"UNKNOWN\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    var hashValue: Int { return rawValue }

    var debugDescription: String {
      get {
        switch self {
        case .undefined: return ".undefined"
        case .started: return ".started"
        case .stopped: return ".stopped"
        case .paused: return ".paused"
        case .error: return ".error"
        case .unknown: return ".unknown"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  var status: Protos_ServerStatus.StatusCode = Protos_ServerStatus.StatusCode.undefined

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: Protos_ServerStatus.StatusCode.self, value: &status)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if status != Protos_ServerStatus.StatusCode.undefined {
      try visitor.visitSingularField(fieldType: Protos_ServerStatus.StatusCode.self, value: status, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Protos_ServerStatus) -> Bool {
    if status != other.status {return false}
    return true
  }
}

struct Protos_LogLevelRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Protos_LogLevelRequest"}
  public var protoMessageName: String {return "LogLevelRequest"}
  public var protoPackageName: String {return "protos"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "log_module", json: "logModule", swift: "logModule"),
    2: .unique(proto: "log_level", json: "logLevel", swift: "logLevel"),
  ]


  var logModule: String = ""

  var logLevel: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &logModule)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &logLevel)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if logModule != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: logModule, fieldNumber: 1)
    }
    if logLevel != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: logLevel, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Protos_LogLevelRequest) -> Bool {
    if logModule != other.logModule {return false}
    if logLevel != other.logLevel {return false}
    return true
  }
}

struct Protos_LogLevelResponse: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Protos_LogLevelResponse"}
  public var protoMessageName: String {return "LogLevelResponse"}
  public var protoPackageName: String {return "protos"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "log_module", json: "logModule", swift: "logModule"),
    2: .unique(proto: "log_level", json: "logLevel", swift: "logLevel"),
  ]


  var logModule: String = ""

  var logLevel: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &logModule)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &logLevel)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if logModule != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: logModule, fieldNumber: 1)
    }
    if logLevel != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: logLevel, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Protos_LogLevelResponse) -> Bool {
    if logModule != other.logModule {return false}
    if logLevel != other.logLevel {return false}
    return true
  }
}
