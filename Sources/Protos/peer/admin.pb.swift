/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: peer/admin.proto
 *
 */

// 
// Copyright IBM Corp. 2016 All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

struct Protos_ServerStatus: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ServerStatus"
  static let protoPackageName: String = "protos"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  var status: Protos_ServerStatus.StatusCode = Protos_ServerStatus.StatusCode.undefined

  enum StatusCode: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    typealias RawValue = Int
    case undefined // = 0
    case started // = 1
    case stopped // = 2
    case paused // = 3
    case error // = 4
    case unknown // = 5
    case UNRECOGNIZED(Int)

    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "UNDEFINED"),
      1: .same(proto: "STARTED"),
      2: .same(proto: "STOPPED"),
      3: .same(proto: "PAUSED"),
      4: .same(proto: "ERROR"),
      5: .same(proto: "UNKNOWN"),
    ]

    init() {
      self = .undefined
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .undefined
      case 1: self = .started
      case 2: self = .stopped
      case 3: self = .paused
      case 4: self = .error
      case 5: self = .unknown
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .undefined: return 0
      case .started: return 1
      case .stopped: return 2
      case .paused: return 3
      case .error: return 4
      case .unknown: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularEnumField(value: &status)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if status != Protos_ServerStatus.StatusCode.undefined {
      try visitor.visitSingularEnumField(value: status, fieldNumber: 1)
    }
  }

  func _protobuf_generated_isEqualTo(other: Protos_ServerStatus) -> Bool {
    if status != other.status {return false}
    return true
  }
}

struct Protos_LogLevelRequest: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "LogLevelRequest"
  static let protoPackageName: String = "protos"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "log_module", json: "logModule"),
    2: .unique(proto: "log_level", json: "logLevel"),
  ]

  var logModule: String = ""

  var logLevel: String = ""

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularStringField(value: &logModule)
    case 2: try decoder.decodeSingularStringField(value: &logLevel)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !logModule.isEmpty {
      try visitor.visitSingularStringField(value: logModule, fieldNumber: 1)
    }
    if !logLevel.isEmpty {
      try visitor.visitSingularStringField(value: logLevel, fieldNumber: 2)
    }
  }

  func _protobuf_generated_isEqualTo(other: Protos_LogLevelRequest) -> Bool {
    if logModule != other.logModule {return false}
    if logLevel != other.logLevel {return false}
    return true
  }
}

struct Protos_LogLevelResponse: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "LogLevelResponse"
  static let protoPackageName: String = "protos"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "log_module", json: "logModule"),
    2: .unique(proto: "log_level", json: "logLevel"),
  ]

  var logModule: String = ""

  var logLevel: String = ""

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularStringField(value: &logModule)
    case 2: try decoder.decodeSingularStringField(value: &logLevel)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !logModule.isEmpty {
      try visitor.visitSingularStringField(value: logModule, fieldNumber: 1)
    }
    if !logLevel.isEmpty {
      try visitor.visitSingularStringField(value: logLevel, fieldNumber: 2)
    }
  }

  func _protobuf_generated_isEqualTo(other: Protos_LogLevelResponse) -> Bool {
    if logModule != other.logModule {return false}
    if logLevel != other.logLevel {return false}
    return true
  }
}
