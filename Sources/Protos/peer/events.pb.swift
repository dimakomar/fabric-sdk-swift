/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: peer/events.proto
 *
 */

// 
// Copyright IBM Corp. 2016 All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf


// ----Event objects----

enum Protos_EventType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case register // = 0
  case block // = 1
  case chaincode // = 2
  case rejection // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .register
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .register
    case 1: self = .block
    case 2: self = .chaincode
    case 3: self = .rejection
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  init?(name: String) {
    switch name {
    case "register": self = .register
    case "block": self = .block
    case "chaincode": self = .chaincode
    case "rejection": self = .rejection
    default: return nil
    }
  }

  init?(jsonName: String) {
    switch jsonName {
    case "REGISTER": self = .register
    case "BLOCK": self = .block
    case "CHAINCODE": self = .chaincode
    case "REJECTION": self = .rejection
    default: return nil
    }
  }

  init?(protoName: String) {
    switch protoName {
    case "REGISTER": self = .register
    case "BLOCK": self = .block
    case "CHAINCODE": self = .chaincode
    case "REJECTION": self = .rejection
    default: return nil
    }
  }

  var rawValue: Int {
    get {
      switch self {
      case .register: return 0
      case .block: return 1
      case .chaincode: return 2
      case .rejection: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  var json: String {
    get {
      switch self {
      case .register: return "\"REGISTER\""
      case .block: return "\"BLOCK\""
      case .chaincode: return "\"CHAINCODE\""
      case .rejection: return "\"REJECTION\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  var hashValue: Int { return rawValue }

  var debugDescription: String {
    get {
      switch self {
      case .register: return ".register"
      case .block: return ".block"
      case .chaincode: return ".chaincode"
      case .rejection: return ".rejection"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

///  ChaincodeReg is used for registering chaincode Interests
///  when EventType is CHAINCODE
struct Protos_ChaincodeReg: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Protos_ChaincodeReg"}
  public var protoMessageName: String {return "ChaincodeReg"}
  public var protoPackageName: String {return "protos"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "chaincode_id", json: "chaincodeId", swift: "chaincodeId"),
    2: .unique(proto: "event_name", json: "eventName", swift: "eventName"),
  ]


  var chaincodeId: String = ""

  var eventName: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &chaincodeId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &eventName)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if chaincodeId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: chaincodeId, fieldNumber: 1)
    }
    if eventName != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: eventName, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Protos_ChaincodeReg) -> Bool {
    if chaincodeId != other.chaincodeId {return false}
    if eventName != other.eventName {return false}
    return true
  }
}

struct Protos_Interest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Protos_Interest"}
  public var protoMessageName: String {return "Interest"}
  public var protoPackageName: String {return "protos"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "event_type", json: "eventType", swift: "eventType"),
    2: .unique(proto: "chaincode_reg_info", json: "chaincodeRegInfo", swift: "chaincodeRegInfo"),
    3: .same(proto: "chainID", swift: "chainId"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Protos_Interest
    var _eventType: Protos_EventType = Protos_EventType.register
    var _regInfo = Protos_Interest.OneOf_RegInfo()
    var _chainId: String = ""

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: Protos_EventType.self, value: &_eventType)
      case 2: try _regInfo.decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_chainId)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _eventType != Protos_EventType.register {
        try visitor.visitSingularField(fieldType: Protos_EventType.self, value: _eventType, fieldNumber: 1)
      }
      try _regInfo.traverse(visitor: visitor, start: 2, end: 3)
      if _chainId != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _chainId, fieldNumber: 3)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _eventType != other._eventType {return false}
      if _regInfo != other._regInfo {return false}
      if _chainId != other._chainId {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._eventType = _eventType
      clone._regInfo = _regInfo
      clone._chainId = _chainId
      return clone
    }
  }

  private var _storage = _StorageClass()


  enum OneOf_RegInfo: ExpressibleByNilLiteral, SwiftProtobuf.OneofEnum {
    case chaincodeRegInfo(Protos_ChaincodeReg)
    case None

    static func ==(lhs: Protos_Interest.OneOf_RegInfo, rhs: Protos_Interest.OneOf_RegInfo) -> Bool {
      switch (lhs, rhs) {
      case (.chaincodeRegInfo(let l), .chaincodeRegInfo(let r)): return l == r
      case (.None, .None): return true
      default: return false
      }
    }

    public init(nilLiteral: ()) {
      self = .None
    }

    public init() {
      self = .None
    }

    public mutating func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      if self != .None && setter.rejectConflictingOneof {
        throw SwiftProtobuf.DecodingError.duplicatedOneOf
      }
      switch protoFieldNumber {
      case 2:
        var value: Protos_ChaincodeReg?
        try setter.decodeSingularMessageField(fieldType: Protos_ChaincodeReg.self, value: &value)
        if let value = value {
          self = .chaincodeRegInfo(value)
        }
      default:
        self = .None
      }
    }

    public func traverse(visitor: SwiftProtobuf.Visitor, start: Int, end: Int) throws {
      switch self {
      case .chaincodeRegInfo(let v):
        if start <= 2 && 2 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
      case .None:
        break
      }
    }
  }

  var eventType: Protos_EventType {
    get {return _storage._eventType}
    set {_uniqueStorage()._eventType = newValue}
  }

  var chaincodeRegInfo: Protos_ChaincodeReg {
    get {
      if case .chaincodeRegInfo(let v) = _storage._regInfo {
        return v
      }
      return Protos_ChaincodeReg()
    }
    set {
      _uniqueStorage()._regInfo = .chaincodeRegInfo(newValue)
    }
  }

  var chainId: String {
    get {return _storage._chainId}
    set {_uniqueStorage()._chainId = newValue}
  }

  public var regInfo: OneOf_RegInfo {
    get {return _storage._regInfo}
    set {
      _uniqueStorage()._regInfo = newValue
    }
  }

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Protos_Interest) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///  ---------- consumer events ---------
///  Register is sent by consumers for registering events
///  string type - "register"
struct Protos_Register: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Protos_Register"}
  public var protoMessageName: String {return "Register"}
  public var protoPackageName: String {return "protos"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "events", swift: "events"),
  ]


  var events: [Protos_Interest] = []

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: Protos_Interest.self, value: &events)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !events.isEmpty {
      try visitor.visitRepeatedMessageField(value: events, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Protos_Register) -> Bool {
    if events != other.events {return false}
    return true
  }
}

///  Rejection is sent by consumers for erroneous transaction rejection events
///  string type - "rejection"
struct Protos_Rejection: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Protos_Rejection"}
  public var protoMessageName: String {return "Rejection"}
  public var protoPackageName: String {return "protos"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "tx", swift: "tx"),
    2: .unique(proto: "error_msg", json: "errorMsg", swift: "errorMsg"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Protos_Rejection
    var _tx: Protos_Transaction? = nil
    var _errorMsg: String = ""

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Protos_Transaction.self, value: &_tx)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_errorMsg)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _tx {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _errorMsg != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _errorMsg, fieldNumber: 2)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _tx != other._tx {return false}
      if _errorMsg != other._errorMsg {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._tx = _tx
      clone._errorMsg = _errorMsg
      return clone
    }
  }

  private var _storage = _StorageClass()


  var tx: Protos_Transaction {
    get {return _storage._tx ?? Protos_Transaction()}
    set {_uniqueStorage()._tx = newValue}
  }
  public var hasTx: Bool {
    return _storage._tx != nil
  }
  public mutating func clearTx() {
    return _storage._tx = nil
  }

  var errorMsg: String {
    get {return _storage._errorMsg}
    set {_uniqueStorage()._errorMsg = newValue}
  }

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Protos_Rejection) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///  ---------- producer events ---------
struct Protos_Unregister: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Protos_Unregister"}
  public var protoMessageName: String {return "Unregister"}
  public var protoPackageName: String {return "protos"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "events", swift: "events"),
  ]


  var events: [Protos_Interest] = []

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: Protos_Interest.self, value: &events)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !events.isEmpty {
      try visitor.visitRepeatedMessageField(value: events, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Protos_Unregister) -> Bool {
    if events != other.events {return false}
    return true
  }
}

///   SignedEvent is used for any communication between consumer and producer
struct Protos_SignedEvent: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Protos_SignedEvent"}
  public var protoMessageName: String {return "SignedEvent"}
  public var protoPackageName: String {return "protos"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "signature", swift: "signature"),
    2: .same(proto: "eventBytes", swift: "eventBytes"),
  ]


  ///   Signature over the event bytes
  var signature: Data = Data()

  ///   Marshal of Event object
  var eventBytes: Data = Data()

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &signature)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &eventBytes)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if signature != Data() {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: signature, fieldNumber: 1)
    }
    if eventBytes != Data() {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: eventBytes, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Protos_SignedEvent) -> Bool {
    if signature != other.signature {return false}
    if eventBytes != other.eventBytes {return false}
    return true
  }
}

///  Event is used by
///    - consumers (adapters) to send Register
///    - producer to advertise supported types and events
struct Protos_Event: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Protos_Event"}
  public var protoMessageName: String {return "Event"}
  public var protoPackageName: String {return "protos"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "register", swift: "register"),
    2: .same(proto: "block", swift: "block"),
    3: .unique(proto: "chaincode_event", json: "chaincodeEvent", swift: "chaincodeEvent"),
    4: .same(proto: "rejection", swift: "rejection"),
    5: .same(proto: "unregister", swift: "unregister"),
    6: .same(proto: "creator", swift: "creator"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Protos_Event
    var _event = Protos_Event.OneOf_Event()
    var _creator: Data = Data()

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1, 2, 3, 4, 5: try _event.decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
      case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_creator)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      try _event.traverse(visitor: visitor, start: 1, end: 6)
      if _creator != Data() {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: _creator, fieldNumber: 6)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _event != other._event {return false}
      if _creator != other._creator {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._event = _event
      clone._creator = _creator
      return clone
    }
  }

  private var _storage = _StorageClass()


  enum OneOf_Event: ExpressibleByNilLiteral, SwiftProtobuf.OneofEnum {
    case register(Protos_Register)
    case block(Common_Block)
    case chaincodeEvent(Protos_ChaincodeEvent)
    case rejection(Protos_Rejection)
    case unregister(Protos_Unregister)
    case None

    static func ==(lhs: Protos_Event.OneOf_Event, rhs: Protos_Event.OneOf_Event) -> Bool {
      switch (lhs, rhs) {
      case (.register(let l), .register(let r)): return l == r
      case (.block(let l), .block(let r)): return l == r
      case (.chaincodeEvent(let l), .chaincodeEvent(let r)): return l == r
      case (.rejection(let l), .rejection(let r)): return l == r
      case (.unregister(let l), .unregister(let r)): return l == r
      case (.None, .None): return true
      default: return false
      }
    }

    public init(nilLiteral: ()) {
      self = .None
    }

    public init() {
      self = .None
    }

    public mutating func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      if self != .None && setter.rejectConflictingOneof {
        throw SwiftProtobuf.DecodingError.duplicatedOneOf
      }
      switch protoFieldNumber {
      case 1:
        var value: Protos_Register?
        try setter.decodeSingularMessageField(fieldType: Protos_Register.self, value: &value)
        if let value = value {
          self = .register(value)
        }
      case 2:
        var value: Common_Block?
        try setter.decodeSingularMessageField(fieldType: Common_Block.self, value: &value)
        if let value = value {
          self = .block(value)
        }
      case 3:
        var value: Protos_ChaincodeEvent?
        try setter.decodeSingularMessageField(fieldType: Protos_ChaincodeEvent.self, value: &value)
        if let value = value {
          self = .chaincodeEvent(value)
        }
      case 4:
        var value: Protos_Rejection?
        try setter.decodeSingularMessageField(fieldType: Protos_Rejection.self, value: &value)
        if let value = value {
          self = .rejection(value)
        }
      case 5:
        var value: Protos_Unregister?
        try setter.decodeSingularMessageField(fieldType: Protos_Unregister.self, value: &value)
        if let value = value {
          self = .unregister(value)
        }
      default:
        self = .None
      }
    }

    public func traverse(visitor: SwiftProtobuf.Visitor, start: Int, end: Int) throws {
      switch self {
      case .register(let v):
        if start <= 1 && 1 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
      case .block(let v):
        if start <= 2 && 2 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
      case .chaincodeEvent(let v):
        if start <= 3 && 3 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        }
      case .rejection(let v):
        if start <= 4 && 4 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
        }
      case .unregister(let v):
        if start <= 5 && 5 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
        }
      case .None:
        break
      }
    }
  }

  ///  Register consumer sent event
  var register: Protos_Register {
    get {
      if case .register(let v) = _storage._event {
        return v
      }
      return Protos_Register()
    }
    set {
      _uniqueStorage()._event = .register(newValue)
    }
  }

  ///  producer events
  var block: Common_Block {
    get {
      if case .block(let v) = _storage._event {
        return v
      }
      return Common_Block()
    }
    set {
      _uniqueStorage()._event = .block(newValue)
    }
  }

  var chaincodeEvent: Protos_ChaincodeEvent {
    get {
      if case .chaincodeEvent(let v) = _storage._event {
        return v
      }
      return Protos_ChaincodeEvent()
    }
    set {
      _uniqueStorage()._event = .chaincodeEvent(newValue)
    }
  }

  var rejection: Protos_Rejection {
    get {
      if case .rejection(let v) = _storage._event {
        return v
      }
      return Protos_Rejection()
    }
    set {
      _uniqueStorage()._event = .rejection(newValue)
    }
  }

  ///  Unregister consumer sent events
  var unregister: Protos_Unregister {
    get {
      if case .unregister(let v) = _storage._event {
        return v
      }
      return Protos_Unregister()
    }
    set {
      _uniqueStorage()._event = .unregister(newValue)
    }
  }

  ///   Creator of the event, specified as a certificate chain
  var creator: Data {
    get {return _storage._creator}
    set {_uniqueStorage()._creator = newValue}
  }

  public var event: OneOf_Event {
    get {return _storage._event}
    set {
      _uniqueStorage()._event = newValue
    }
  }

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Protos_Event) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}
