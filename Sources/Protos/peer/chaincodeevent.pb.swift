/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: peer/chaincodeevent.proto
 *
 */

///  
///  Copyright IBM Corp. 2016 All Rights Reserved.
///  
///  Licensed under the Apache License, Version 2.0 (the "License");
///  you may not use this file except in compliance with the License.
///  You may obtain a copy of the License at
///  
///  http://www.apache.org/licenses/LICENSE-2.0
///  
///  Unless required by applicable law or agreed to in writing, software
///  distributed under the License is distributed on an "AS IS" BASIS,
///  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
///  See the License for the specific language governing permissions and
///  limitations under the License.

import Foundation
import SwiftProtobuf


///  ChaincodeEvent is used for events and registrations that are specific to chaincode
///  string type - "chaincode"
struct Protos_ChaincodeEvent: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Protos_ChaincodeEvent"}
  public var protoMessageName: String {return "ChaincodeEvent"}
  public var protoPackageName: String {return "protos"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "chaincode_id", json: "chaincodeId", swift: "chaincodeId"),
    2: .unique(proto: "tx_id", json: "txId", swift: "txId"),
    3: .unique(proto: "event_name", json: "eventName", swift: "eventName"),
    4: .same(proto: "payload", swift: "payload"),
  ]


  var chaincodeId: String = ""

  var txId: String = ""

  var eventName: String = ""

  var payload: Data = Data()

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &chaincodeId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &txId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &eventName)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &payload)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if chaincodeId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: chaincodeId, fieldNumber: 1)
    }
    if txId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: txId, fieldNumber: 2)
    }
    if eventName != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: eventName, fieldNumber: 3)
    }
    if payload != Data() {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: payload, fieldNumber: 4)
    }
  }

  public func _protoc_generated_isEqualTo(other: Protos_ChaincodeEvent) -> Bool {
    if chaincodeId != other.chaincodeId {return false}
    if txId != other.txId {return false}
    if eventName != other.eventName {return false}
    if payload != other.payload {return false}
    return true
  }
}
