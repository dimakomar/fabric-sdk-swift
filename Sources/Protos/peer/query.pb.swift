/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: peer/query.proto
 *
 */

// 
// Copyright IBM Corp. 2017 All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

///   ChaincodeQueryResponse returns information about each chaincode that pertains
///   to a query in lccc.go, such as GetChaincodes (returns all chaincodes
///   instantiated on a channel), and GetInstalledChaincodes (returns all chaincodes
///   installed on a peer)
struct Protos_ChaincodeQueryResponse: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ChaincodeQueryResponse"
  static let protoPackageName: String = "protos"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chaincodes"),
  ]

  var chaincodes: [Protos_ChaincodeInfo] = []

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeRepeatedMessageField(value: &chaincodes)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !chaincodes.isEmpty {
      try visitor.visitRepeatedMessageField(value: chaincodes, fieldNumber: 1)
    }
  }

  func _protobuf_generated_isEqualTo(other: Protos_ChaincodeQueryResponse) -> Bool {
    if chaincodes != other.chaincodes {return false}
    return true
  }
}

///   ChaincodeInfo contains general information about an installed/instantiated
///   chaincode
struct Protos_ChaincodeInfo: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ChaincodeInfo"
  static let protoPackageName: String = "protos"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "version"),
    3: .same(proto: "path"),
    4: .same(proto: "input"),
    5: .same(proto: "escc"),
    6: .same(proto: "vscc"),
  ]

  var name: String = ""

  var version: String = ""

  ///   the path as specified by the install/instantiate transaction
  var path: String = ""

  ///   the chaincode function upon instantiation and its arguments. This will be
  ///   blank if the query is returning information about installed chaincodes.
  var input: String = ""

  ///   the name of the ESCC for this chaincode. This will be
  ///   blank if the query is returning information about installed chaincodes.
  var escc: String = ""

  ///   the name of the VSCC for this chaincode. This will be
  ///   blank if the query is returning information about installed chaincodes.
  var vscc: String = ""

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularStringField(value: &name)
    case 2: try decoder.decodeSingularStringField(value: &version)
    case 3: try decoder.decodeSingularStringField(value: &path)
    case 4: try decoder.decodeSingularStringField(value: &input)
    case 5: try decoder.decodeSingularStringField(value: &escc)
    case 6: try decoder.decodeSingularStringField(value: &vscc)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !name.isEmpty {
      try visitor.visitSingularStringField(value: name, fieldNumber: 1)
    }
    if !version.isEmpty {
      try visitor.visitSingularStringField(value: version, fieldNumber: 2)
    }
    if !path.isEmpty {
      try visitor.visitSingularStringField(value: path, fieldNumber: 3)
    }
    if !input.isEmpty {
      try visitor.visitSingularStringField(value: input, fieldNumber: 4)
    }
    if !escc.isEmpty {
      try visitor.visitSingularStringField(value: escc, fieldNumber: 5)
    }
    if !vscc.isEmpty {
      try visitor.visitSingularStringField(value: vscc, fieldNumber: 6)
    }
  }

  func _protobuf_generated_isEqualTo(other: Protos_ChaincodeInfo) -> Bool {
    if name != other.name {return false}
    if version != other.version {return false}
    if path != other.path {return false}
    if input != other.input {return false}
    if escc != other.escc {return false}
    if vscc != other.vscc {return false}
    return true
  }
}

///   ChannelQueryResponse returns information about each channel that pertains
///   to a query in lccc.go, such as GetChannels (returns all channels for a
///   given peer)
struct Protos_ChannelQueryResponse: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ChannelQueryResponse"
  static let protoPackageName: String = "protos"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "channels"),
  ]

  var channels: [Protos_ChannelInfo] = []

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeRepeatedMessageField(value: &channels)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !channels.isEmpty {
      try visitor.visitRepeatedMessageField(value: channels, fieldNumber: 1)
    }
  }

  func _protobuf_generated_isEqualTo(other: Protos_ChannelQueryResponse) -> Bool {
    if channels != other.channels {return false}
    return true
  }
}

///   ChannelInfo contains general information about channels
struct Protos_ChannelInfo: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ChannelInfo"
  static let protoPackageName: String = "protos"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "channel_id", json: "channelId"),
  ]

  var channelId: String = ""

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularStringField(value: &channelId)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !channelId.isEmpty {
      try visitor.visitSingularStringField(value: channelId, fieldNumber: 1)
    }
  }

  func _protobuf_generated_isEqualTo(other: Protos_ChannelInfo) -> Bool {
    if channelId != other.channelId {return false}
    return true
  }
}
